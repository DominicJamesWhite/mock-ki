id: promote-to-staging
name: Promote Development to Staging
description: Promotes a Development environment to Staging with quality gates including SonarQube, Veracode, Selenium, Prisma Cloud security scan, and Cloudzero cost prediction.

on:
  path_call:
    inputs:
      app_id:
        type: string
        description: "Application ID to promote"
        required: true
      dev_env_id:
        type: string
        description: "Source Development Environment ID"
        required: true
      staging_env_id:
        type: string
        description: "Target Staging Environment ID"
        required: true
      prod_env_id:
        type: string
        description: "Production Environment ID for cost comparison"
        required: true
      cost_threshold:
        type: number
        description: "Maximum allowed percentage increase in cost prediction compared to production (default: 5)"
        required: false

timeout-minutes: 120

jobs:
  quality-gates:
    name: Run Quality Gates
    steps:
      - id: run-sonarqube
        name: Run SonarQube Analysis
        uses: humanitec/script
        with:
          script: |
            echo "Running SonarQube analysis on ${inputs.app_id} (${inputs.dev_env_id})"

            # Connect to SonarQube and run analysis
            # This is a placeholder for the actual SonarQube integration
            sonar-scanner \
              -Dsonar.projectKey=${inputs.app_id} \
              -Dsonar.organization=humanitec \
              -Dsonar.host.url=https://sonarqube.example.com \
              -Dsonar.login=$SONAR_TOKEN

            # Check quality gate status
            SONAR_STATUS=$(curl -s "https://sonarqube.example.com/api/qualitygates/project_status?projectKey=${inputs.app_id}" \
              -H "Authorization: Bearer $SONAR_TOKEN" | jq -r '.projectStatus.status')

            if [ "$SONAR_STATUS" != "OK" ]; then
              echo "::error::SonarQube quality gate failed with status: $SONAR_STATUS"
              exit 1
            fi

            echo "SonarQube analysis passed!"

      - id: run-veracode
        name: Run Veracode Security Scan
        uses: humanitec/script
        with:
          script: |
            echo "Running Veracode security scan on ${inputs.app_id}"

            # Get application artifacts and submit to Veracode
            # This is a placeholder for the actual Veracode integration
            veracode-cli scan \
              --app-name "${inputs.app_id}" \
              --scan-name "Promotion to staging ${inputs.staging_env_id}" \
              --file-path "./artifacts" \
              --wait-for-results

            # Check scan results
            VERACODE_RESULT=$(veracode-cli results --format json | jq -r '.summary.policy_compliance_status')

            if [ "$VERACODE_RESULT" != "PASS" ]; then
              echo "::error::Veracode scan failed with status: $VERACODE_RESULT"
              exit 1
            fi

            echo "Veracode security scan passed!"

      - id: run-selenium
        name: Run Selenium UI Tests
        uses: humanitec/script
        with:
          script: |
            echo "Running Selenium UI tests on ${inputs.app_id} (${inputs.dev_env_id})"

            # Get the application URL from Humanitec
            APP_URL=$(humctl get active-resources --app ${inputs.app_id} --env ${inputs.dev_env_id} -o json | \
                      jq -r '.[] | select(.metadata.type == "dns") | .status.resource.host' | \
                      head -1)

            if [ -z "$APP_URL" ]; then
              echo "::error::Could not determine application URL"
              exit 1
            fi

            # Run Selenium tests against the application URL
            # This is a placeholder for the actual Selenium integration
            selenium-runner \
              --url "https://$APP_URL" \
              --test-suite "promotion-suite" \
              --browser "chrome" \
              --output-dir "./test-results"

            # Check test results
            if [ $? -ne 0 ]; then
              echo "::error::Selenium UI tests failed"
              exit 1
            fi

            echo "Selenium UI tests passed!"

  deploy-to-staging:
    name: Deploy to Staging Environment
    needs: quality-gates
    steps:
      - id: create-staging-env
        name: Create or Update Staging Environment
        uses: humanitec/cli-action
        with:
          command: create env ${inputs.staging_env_id} --app ${inputs.app_id} --type staging --from ${inputs.dev_env_id} --update-if-exists

      - id: wait-for-deployment
        name: Wait for Deployment to Complete
        uses: humanitec/script
        with:
          script: |
            echo "Waiting for deployment to staging to complete..."

            # Poll deployment status
            MAX_ATTEMPTS=60
            ATTEMPT=0

            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
              STATUS=$(humctl get envs ${inputs.staging_env_id} --app ${inputs.app_id} -o json | jq -r '.status.last_deployment.status')
              
              if [ "$STATUS" == "succeeded" ]; then
                echo "Deployment to staging completed successfully!"
                break
              elif [ "$STATUS" == "failed" ]; then
                echo "::error::Deployment to staging failed"
                exit 1
              fi
              
              echo "Deployment status: $STATUS. Waiting..."
              sleep 10
              ATTEMPT=$((ATTEMPT + 1))
            done

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::Timed out waiting for deployment to complete"
              exit 1
            fi

  security-scan:
    name: Run Security Scan
    needs: deploy-to-staging
    steps:
      - id: run-prisma-cloud
        name: Run Prisma Cloud Security Scan
        uses: humanitec/script
        with:
          script: |
            echo "Running Prisma Cloud security scan on staging environment ${inputs.staging_env_id}"

            # Get Kubernetes namespace for the staging environment
            NAMESPACE=$(humctl get active-resources --app ${inputs.app_id} --env ${inputs.staging_env_id} -o json | \
                        jq -r '.[] | select(.metadata.type == "k8s-namespace") | .status.resource.namespace')

            if [ -z "$NAMESPACE" ]; then
              echo "::error::Could not determine Kubernetes namespace"
              exit 1
            fi

            # Run Prisma Cloud scan on the namespace
            # This is a placeholder for the actual Prisma Cloud integration
            prisma-scan \
              --namespace "$NAMESPACE" \
              --scan-type "vulnerability,compliance" \
              --output-format "json" \
              --output-file "./prisma-results.json"

            # Check for critical vulnerabilities
            CRITICAL_COUNT=$(jq '.vulnerabilities | map(select(.severity=="critical")) | length' ./prisma-results.json)

            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "::error::Found $CRITICAL_COUNT critical vulnerabilities in Prisma Cloud scan"
              exit 1
            fi

            echo "Prisma Cloud security scan passed!"

  cost-analysis:
    name: Run Cost Analysis
    needs: security-scan
    steps:
      - id: cloudzero-prediction
        name: Run Cloudzero Cost Prediction
        uses: humanitec/script
        with:
          script: |
            echo "Running Cloudzero cost prediction analysis"

            # Set default threshold if not provided
            THRESHOLD="${inputs.cost_threshold:-5}"

            # Get cost data for production environment
            # This is a placeholder for the actual Cloudzero integration
            PROD_COST=$(cloudzero-cli cost \
                         --env ${inputs.prod_env_id} \
                         --app ${inputs.app_id} \
                         --period 30d \
                         --output json | jq -r '.totalCost')

            # Get predicted cost for staging environment
            STAGING_COST=$(cloudzero-cli predict \
                            --env ${inputs.staging_env_id} \
                            --app ${inputs.app_id} \
                            --period 30d \
                            --output json | jq -r '.predictedCost')

            # Calculate percentage increase
            INCREASE=$(echo "scale=2; 100 * ($STAGING_COST - $PROD_COST) / $PROD_COST" | bc)

            echo "Production environment cost: \$$PROD_COST"
            echo "Predicted staging environment cost: \$$STAGING_COST"
            echo "Percentage increase: $INCREASE%"

            # Check if cost increase exceeds threshold
            if (( $(echo "$INCREASE > $THRESHOLD" | bc -l) )); then
              echo "::warning::Cost increase of $INCREASE% exceeds threshold of $THRESHOLD%"
              echo "::set-output name=cost_exceeded::true"
              echo "::set-output name=cost_increase::$INCREASE"
            else
              echo "Cost prediction is within acceptable range"
              echo "::set-output name=cost_exceeded::false"
              echo "::set-output name=cost_increase::$INCREASE"
            fi

  finalize:
    name: Finalize Promotion
    needs: cost-analysis
    steps:
      - id: check-cost
        name: Check Cost Prediction Result
        uses: humanitec/javascript-action
        with:
          script: |
            const costExceeded = process.env.COST_EXCEEDED === 'true';
            const costIncrease = process.env.COST_INCREASE;

            if (costExceeded) {
              console.log(`Cost increase of ${costIncrease}% exceeds threshold. Rolling back deployment.`);
              return { rollback: true, message: `Cost increase of ${costIncrease}% exceeds threshold` };
            } else {
              console.log(`Cost increase of ${costIncrease}% is within acceptable range. Promotion successful!`);
              return { rollback: false, message: `Promotion successful with ${costIncrease}% cost increase` };
            }
        env:
          COST_EXCEEDED: ${{ needs.cost-analysis.outputs.cost_exceeded }}
          COST_INCREASE: ${{ needs.cost-analysis.outputs.cost_increase }}

      - id: rollback-if-needed
        name: Rollback If Needed
        if: ${{ fromJson(steps.check-cost.outputs.result).rollback }}
        uses: humanitec/cli-action
        with:
          command: create env ${inputs.staging_env_id} --app ${inputs.app_id} --type staging --from ${inputs.dev_env_id} --rollback-to previous

      - id: notify-result
        name: Send Notification
        uses: humanitec/script
        with:
          script: |
            RESULT='${{ steps.check-cost.outputs.result }}'
            ROLLBACK=$(echo $RESULT | jq -r '.rollback')
            MESSAGE=$(echo $RESULT | jq -r '.message')

            if [ "$ROLLBACK" == "true" ]; then
              echo "Promotion failed: $MESSAGE"
              # Send notification about rollback
              curl -X POST "https://notify.example.com/api/alert" \
                -H "Content-Type: application/json" \
                -d "{
                  \"title\": \"Promotion to Staging Failed\",
                  \"message\": \"${MESSAGE}. Environment has been rolled back.\",
                  \"app\": \"${inputs.app_id}\",
                  \"environment\": \"${inputs.staging_env_id}\",
                  \"severity\": \"warning\"
                }"
            else
              echo "Promotion succeeded: $MESSAGE"
              # Send notification about success
              curl -X POST "https://notify.example.com/api/alert" \
                -H "Content-Type: application/json" \
                -d "{
                  \"title\": \"Promotion to Staging Succeeded\",
                  \"message\": \"${MESSAGE}\",
                  \"app\": \"${inputs.app_id}\",
                  \"environment\": \"${inputs.staging_env_id}\",
                  \"severity\": \"info\"
                }"
            fi

    outputs:
      success: ${{ !fromJson(steps.check-cost.outputs.result).rollback }}
      message: ${{ fromJson(steps.check-cost.outputs.result).message }}
