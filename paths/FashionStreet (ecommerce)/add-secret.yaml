id: Add secret
name: Add a new secret to your application
description: Creates a secret in Vault and adds a reference to it in a Humanitec application.
on:
  path_call:
    inputs:
      app_id:
        type: string
        description: "Application ID where the secret will be added"
        required: true
      secret_key:
        type: string
        description: "Key name for the secret reference in Humanitec"
        required: true
      secret_value:
        type: string
        description: "The actual secret value to store in Vault"
        required: true
      vault_path:
        type: string
        description: "Path in Vault where the secret should be stored (e.g. 'secrets/myapp')"
        required: true
      vault_key:
        type: string
        description: "Key to use for storing the secret value in Vault"
        required: true
      secret_store:
        type: string
        description: "ID of the Vault secret store to use"
        required: true
      description:
        type: string
        description: "Description of what this secret is used for"
        required: false

timeout-minutes: 15

jobs:
  create-secret:
    name: Store Secret in Vault and Create Reference
    steps:
      - id: validate-inputs
        name: Validate Inputs
        uses: humanitec/javascript-action
        with:
          script: |
            // Validate inputs
            if (!process.env.APP_ID || !process.env.SECRET_KEY || 
                !process.env.SECRET_VALUE || !process.env.VAULT_PATH || 
                !process.env.VAULT_KEY || !process.env.SECRET_STORE) {
              core.setFailed("All required inputs must be provided");
              return false;
            }

            // Make sure the vault path doesn't end with a slash
            const vaultPath = process.env.VAULT_PATH.endsWith('/') 
              ? process.env.VAULT_PATH.slice(0, -1) 
              : process.env.VAULT_PATH;
              
            return { 
              vaultPath,
              fullSecretPath: `${vaultPath}/${process.env.VAULT_KEY}`
            };
        env:
          APP_ID: ${{ inputs.app_id }}
          SECRET_KEY: ${{ inputs.secret_key }}
          SECRET_VALUE: ${{ inputs.secret_value }}
          VAULT_PATH: ${{ inputs.vault_path }}
          VAULT_KEY: ${{ inputs.vault_key }}
          SECRET_STORE: ${{ inputs.secret_store }}

      - id: validate-secret-store
        name: Validate Secret Store Exists
        uses: humanitec/cli-action
        with:
          command: api get /orgs/${HUMANITEC_ORG}/secretstores/${inputs.secret_store} -o json

      - id: check-store-result
        name: Check Secret Store Result
        uses: humanitec/javascript-action
        with:
          script: |
            try {
              const result = JSON.parse(process.env.STORE_RESULT || '{}');
              if (!result.id) {
                core.setFailed(`Secret store '${process.env.SECRET_STORE}' not found`);
                return false;
              }
              
              // Extract information needed to write to Vault
              let vaultUrl, authMethod, role;
              
              if (result.type === 'hashicorp-vault') {
                vaultUrl = result.data?.url;
                authMethod = result.data?.auth_method;
                role = result.data?.role;
                
                if (!vaultUrl) {
                  core.setFailed("Vault URL not found in store configuration");
                  return false;
                }
                
                return {
                  vaultUrl,
                  authMethod: authMethod || 'kubernetes',
                  role: role || 'humanitec'
                };
              } else {
                core.setFailed(`Secret store type '${result.type}' is not supported. Only hashicorp-vault is supported.`);
                return false;
              }
            } catch (e) {
              core.setFailed(`Error checking secret store: ${e.message}`);
              return false;
            }
        env:
          STORE_RESULT: ${{ steps.validate-secret-store.outputs.stdout }}
          SECRET_STORE: ${{ inputs.secret_store }}

      - id: write-to-vault
        name: Write Secret to Vault
        uses: humanitec/vault-action
        with:
          url: ${{ steps.check-store-result.outputs.result.vaultUrl }}
          method: ${{ steps.check-store-result.outputs.result.authMethod }}
          role: ${{ steps.check-store-result.outputs.result.role }}
          path: ${{ steps.validate-inputs.outputs.result.vaultPath }}
          secrets: |
            ${{ inputs.vault_key }}=${{ inputs.secret_value }}

      - id: create-secret-ref
        name: Create Secret Reference in Humanitec
        uses: humanitec/cli-action
        with:
          command: |
            create value ${inputs.secret_key} "${{ steps.validate-inputs.outputs.result.fullSecretPath }}" \
              --app ${inputs.app_id} \
              ${{ inputs.env_id ? '--env ' + inputs.env_id : '' }} \
              --description "${{ inputs.description || 'Secret reference created via automation' }}" \
              --is-secret-ref \
              --secret-store ${inputs.secret_store}

    outputs:
      secret_key: ${{ inputs.secret_key }}
      app_id: ${{ inputs.app_id }}
      env_id: ${{ inputs.env_id || '' }}
      vault_path: ${{ steps.validate-inputs.outputs.result.fullSecretPath }}
